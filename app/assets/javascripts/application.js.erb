//= require react_ujs
//= require components

document.addEventListener("DOMContentLoaded", function () {
  console.log("Application.js loaded, React:", typeof window.React, "ReactDOM:", typeof window.ReactDOM, "Babel:", typeof window.Babel);
  
  const appLayoutUrl    = "<%= asset_path('components/AppLayout.jsx') %>";
  const appHeaderUrl    = "<%= asset_path('components/AppHeader.jsx') %>";
  const appSidebarUrl   = "<%= asset_path('components/AppSidebar.jsx') %>";
  const appContentUrl   = "<%= asset_path('components/AppContent.jsx') %>";
  const appFooterUrl    = "<%= asset_path('components/AppFooter.jsx') %>";
  const newsCardUrl     = "<%= asset_path('components/NewsCard.jsx') %>";
  const newsFeedUrl     = "<%= asset_path('components/NewsFeed.jsx') %>";

  console.log("Fetching JSX components from:", {
    appLayoutUrl, appHeaderUrl, appSidebarUrl, appContentUrl, 
    appFooterUrl, newsCardUrl, newsFeedUrl
  });

  Promise.all([
    fetch(appLayoutUrl).then((r) => { console.log("AppLayout fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch AppLayout: " + r.status)); }),
    fetch(appHeaderUrl).then((r) => { console.log("AppHeader fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch AppHeader: " + r.status)); }),
    fetch(appSidebarUrl).then((r) => { console.log("AppSidebar fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch AppSidebar: " + r.status)); }),
    fetch(appContentUrl).then((r) => { console.log("AppContent fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch AppContent: " + r.status)); }),
    fetch(appFooterUrl).then((r) => { console.log("AppFooter fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch AppFooter: " + r.status)); }),
    fetch(newsCardUrl).then((r) => { console.log("NewsCard fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch NewsCard: " + r.status)); }),
    fetch(newsFeedUrl).then((r) => { console.log("NewsFeed fetch:", r.status, r.ok); return r.ok ? r.text() : Promise.reject(new Error("Failed to fetch NewsFeed: " + r.status)); }),
  ])
    .then(
      ([appLayoutCode, appHeaderCode, appSidebarCode, appContentCode, appFooterCode, newsCardCode, newsFeedCode]) => {
        const compiledAppLayout = Babel.transform(appLayoutCode, { presets: ["react"] }).code;
        const compiledAppHeader = Babel.transform(appHeaderCode, { presets: ["react"] }).code;
        const compiledAppSidebar = Babel.transform(appSidebarCode, { presets: ["react"] }).code;
        const compiledAppContent = Babel.transform(appContentCode, { presets: ["react"] }).code;
        const compiledAppFooter = Babel.transform(appFooterCode, { presets: ["react"] }).code;
        const compiledNewsCard = Babel.transform(newsCardCode, { presets: ["react"] }).code;
        const compiledNewsFeed = Babel.transform(newsFeedCode, { presets: ["react"] }).code;

        eval(compiledAppLayout);
        eval(compiledAppHeader);
        eval(compiledAppSidebar);
        eval(compiledAppContent);
        eval(compiledAppFooter);
        eval(compiledNewsCard);
        eval(compiledNewsFeed);

        if (window.AppLayout) {
          window.ReactDOM.render(window.React.createElement(window.AppLayout), document.getElementById("react-root"));
        }
      }
    )
    .catch((error) => {
      console.error("Error loading JSX files:", error);
      console.error("Full error details:", error.message, error.stack);
      document.getElementById("react-root").innerHTML = "<div style='padding: 20px; text-align: center;'><h2>Failed to load application</h2><p>Error: " + error.message + "</p><p>Check browser console for details.</p></div>";
    });
});


